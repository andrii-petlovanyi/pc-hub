generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Store {
  SIXPM
  BACKCOUNTRY
  MANGODE
  MANGOES
  MACYS
  ZAPPOS
  ZARAES
  VICTORIASSECRETUS
  YOOXUS
  HMUS
  ASOSUS
  BENETTONUS
  BERSHKAUS
  SNEAKERSNSTUFFUS
  GAPUS
  BANANAREPUBLICUS
  OLDNAVYUS
  ATHLETAUS
  GAPFACTORYUS
  BANANAREPUBLICFACTORYUS
  FOREVER21US
  MOOSEJAW
  SHIEKH
  ASHFORD
  IHERBUS
  IHERBUA
  CKUS
}

enum SubscriptionModelType {
  STARTER
  ADVANCED
  PREMIUM
  INFINITE
}

model User {
  id             String          @id @default(uuid())
  telegramId     String          @unique
  email          String?         @unique
  firstName      String?
  lastName       String?
  nickname       String?
  password       String?
  phoneNumber    String          @unique
  linksList      ItemLink[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  storeProposal  ProposalStore[]
  subscriptionId String?
  subscription   Subscription?
}

model AuthTgOTP {
  id          String   @id @default(uuid())
  phoneNumber String   @unique
  userId      String   @unique
  otp         String
  createdAt   DateTime @default(now()) @db.Timestamp()
  updatedAt   DateTime @updatedAt
}

model SubscriptionModel {
  id            String                @id @default(uuid())
  name          String
  type          SubscriptionModelType
  description   String?
  price         String
  linksLimit    Int
  subscriptions Subscription[]
}

model Subscription {
  id                String            @id @default(uuid())
  startDate         DateTime          @default(now()) @db.Timestamp()
  endDate           DateTime
  user              User              @relation(fields: userId, references: id)
  userId            String            @unique
  subscriptionModel SubscriptionModel @relation(fields: modelId, references: id)
  modelId           String
  createdAt         DateTime          @default(now()) @db.Timestamp()
  updatedAt         DateTime          @updatedAt @db.Timestamp()
}

model ItemLink {
  id          String      @id @default(uuid())
  url         String      @unique
  title       String
  imgUrl      String?
  store       Store
  storeInfo   StoreInfo?  @relation(fields: storeInfoId, references: id)
  storeInfoId String?
  isActive    Boolean     @default(true)
  usersList   User[]
  priceList   ItemPrice[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ItemPrice {
  id         String    @id @default(uuid())
  price      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  ItemLink   ItemLink? @relation(fields: [itemLinkId], references: [id])
  itemLinkId String?
}

model ProposalStore {
  id          String   @id @default(uuid())
  storeName   String
  isProcessed Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [telegramId], references: [telegramId])
  telegramId  String
}

model StoreCronTime {
  id                String   @id @default(uuid())
  store             Store
  cronTime          String
  processActiveLink Boolean  @default(true)
  createdAt         DateTime @default(now()) @db.Timestamp()
  updatedAt         DateTime @updatedAt @db.Timestamp()
  CronJob           CronJob?
}

model CronJob {
  id              String        @id @default(uuid())
  cronJobId       String        @unique
  storeCronTime   StoreCronTime @relation(fields: storeCronTimeId, references: id)
  storeCronTimeId String        @unique
  createdAt       DateTime      @default(now()) @db.Timestamp()
  updatedAt       DateTime      @updatedAt @db.Timestamp()
}

model StoreInfo {
  id          String     @id @default(uuid())
  store       Store      @unique
  title       String?
  description String?
  url         String?    @unique
  currency    String
  createdAt   DateTime   @default(now()) @db.Timestamp()
  updatedAt   DateTime   @updatedAt @db.Timestamp()
  itemLink    ItemLink[]
}
